name: Production Deployment

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        env:
          IMAGE_TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          BOT_OWNER_IDS: ${{ secrets.BOT_OWNER_IDS }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          envs: IMAGE_TAG,TELEGRAM_TOKEN,MONGO_URI,BOT_OWNER_IDS,GITHUB_ACTOR,GITHUB_TOKEN
          script: |
            # Create deployment directory
            mkdir -p ~/telegram-bot
            cd ~/telegram-bot

            # Create .env file from secrets
            cat > .env << EOF
            # Telegram Bot Configuration
            TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
            DEBUG=false

            # MongoDB Configuration
            MONGO_URI=${MONGO_URI}
            DATABASE_NAME=telegram_bot
            MONGO_TIMEOUT=10s

            # Application Configuration
            ENVIRONMENT=production
            LOG_LEVEL=info
            LOG_FORMAT=json
            PORT=8080

            # Bot Owner
            BOT_OWNER_IDS=${BOT_OWNER_IDS}

            # Rate Limiting
            RATE_LIMIT_ENABLED=true
            RATE_LIMIT_PER_MIN=20
            EOF

            # Login to GitHub Container Registry
            echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${GITHUB_ACTOR}" --password-stdin

            # Pull latest image
            docker pull ${IMAGE_TAG}

            # Stop and remove old container if exists
            docker stop telegram-bot 2>/dev/null || true
            docker rm telegram-bot 2>/dev/null || true

            # Start new container with docker run
            docker run -d \
              --name telegram-bot \
              --restart unless-stopped \
              --env-file ~/telegram-bot/.env \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              ${IMAGE_TAG}

            # Wait for container to start
            sleep 10

            # Check if container is running
            docker ps | grep telegram-bot

            # Show logs
            docker logs --tail=50 telegram-bot

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script: |
            # Check container health
            if docker ps | grep -q telegram-bot; then
              echo "Deployment successful!"
              exit 0
            else
              echo "Deployment failed!"
              docker logs --tail=100 telegram-bot
              exit 1
            fi

  rollback:
    name: Rollback on Failure
    needs: deploy
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Attempt to restart container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script: |
            # Try to restart the container if it exists but stopped
            if docker ps -a | grep -q telegram-bot; then
              echo "Found existing container, attempting restart..."
              docker restart telegram-bot || echo "Failed to restart container"
            else
              echo "No existing container found for rollback"
            fi

            # Show current status
            docker ps -a | grep telegram-bot || echo "Container not found"

            # Show recent logs
            docker logs --tail=100 telegram-bot 2>/dev/null || echo "Cannot retrieve logs"