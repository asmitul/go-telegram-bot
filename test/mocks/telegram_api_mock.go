// Code generated by MockGen. DO NOT EDIT.
// Source: internal/commands/ban/handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/commands/ban/handler.go -destination=test/mocks/telegram_api_mock.go -package=mocks -mock_names=TelegramAPI=MockTelegramAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTelegramAPI is a mock of TelegramAPI interface.
type MockTelegramAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramAPIMockRecorder
	isgomock struct{}
}

// MockTelegramAPIMockRecorder is the mock recorder for MockTelegramAPI.
type MockTelegramAPIMockRecorder struct {
	mock *MockTelegramAPI
}

// NewMockTelegramAPI creates a new mock instance.
func NewMockTelegramAPI(ctrl *gomock.Controller) *MockTelegramAPI {
	mock := &MockTelegramAPI{ctrl: ctrl}
	mock.recorder = &MockTelegramAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramAPI) EXPECT() *MockTelegramAPIMockRecorder {
	return m.recorder
}

// BanChatMember mocks base method.
func (m *MockTelegramAPI) BanChatMember(chatID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanChatMember", chatID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanChatMember indicates an expected call of BanChatMember.
func (mr *MockTelegramAPIMockRecorder) BanChatMember(chatID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanChatMember", reflect.TypeOf((*MockTelegramAPI)(nil).BanChatMember), chatID, userID)
}

// BanChatMemberWithDuration mocks base method.
func (m *MockTelegramAPI) BanChatMemberWithDuration(chatID, userID int64, until time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanChatMemberWithDuration", chatID, userID, until)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanChatMemberWithDuration indicates an expected call of BanChatMemberWithDuration.
func (mr *MockTelegramAPIMockRecorder) BanChatMemberWithDuration(chatID, userID, until any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanChatMemberWithDuration", reflect.TypeOf((*MockTelegramAPI)(nil).BanChatMemberWithDuration), chatID, userID, until)
}

// SendMessage mocks base method.
func (m *MockTelegramAPI) SendMessage(chatID int64, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", chatID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTelegramAPIMockRecorder) SendMessage(chatID, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTelegramAPI)(nil).SendMessage), chatID, text)
}
