// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapter/ratelimit/limiter.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapter/ratelimit/limiter.go -destination=test/mocks/limiter_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLimiter is a mock of Limiter interface.
type MockLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterMockRecorder
	isgomock struct{}
}

// MockLimiterMockRecorder is the mock recorder for MockLimiter.
type MockLimiterMockRecorder struct {
	mock *MockLimiter
}

// NewMockLimiter creates a new mock instance.
func NewMockLimiter(ctrl *gomock.Controller) *MockLimiter {
	mock := &MockLimiter{ctrl: ctrl}
	mock.recorder = &MockLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimiter) EXPECT() *MockLimiterMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockLimiter) Allow(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockLimiterMockRecorder) Allow(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockLimiter)(nil).Allow), key)
}

// Reset mocks base method.
func (m *MockLimiter) Reset(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", key)
}

// Reset indicates an expected call of Reset.
func (mr *MockLimiterMockRecorder) Reset(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockLimiter)(nil).Reset), key)
}

// ResetAll mocks base method.
func (m *MockLimiter) ResetAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetAll")
}

// ResetAll indicates an expected call of ResetAll.
func (mr *MockLimiterMockRecorder) ResetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAll", reflect.TypeOf((*MockLimiter)(nil).ResetAll))
}
