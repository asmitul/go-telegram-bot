// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/command/command.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/command/command.go -destination=test/mocks/command_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	command "telegram-bot/internal/domain/command"
	user "telegram-bot/internal/domain/user"

	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Description mocks base method.
func (m *MockHandler) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockHandlerMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockHandler)(nil).Description))
}

// Handle mocks base method.
func (m *MockHandler) Handle(ctx *command.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockHandlerMockRecorder) Handle(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHandler)(nil).Handle), ctx)
}

// IsEnabled mocks base method.
func (m *MockHandler) IsEnabled(groupID int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled", groupID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockHandlerMockRecorder) IsEnabled(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockHandler)(nil).IsEnabled), groupID)
}

// Name mocks base method.
func (m *MockHandler) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockHandlerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockHandler)(nil).Name))
}

// RequiredPermission mocks base method.
func (m *MockHandler) RequiredPermission() user.Permission {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequiredPermission")
	ret0, _ := ret[0].(user.Permission)
	return ret0
}

// RequiredPermission indicates an expected call of RequiredPermission.
func (mr *MockHandlerMockRecorder) RequiredPermission() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequiredPermission", reflect.TypeOf((*MockHandler)(nil).RequiredPermission))
}

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
	isgomock struct{}
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRegistry) Get(name string) (command.Handler, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(command.Handler)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRegistryMockRecorder) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRegistry)(nil).Get), name)
}

// GetAll mocks base method.
func (m *MockRegistry) GetAll() []command.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]command.Handler)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRegistryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRegistry)(nil).GetAll))
}

// Register mocks base method.
func (m *MockRegistry) Register(handler command.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegistryMockRecorder) Register(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistry)(nil).Register), handler)
}

// Unregister mocks base method.
func (m *MockRegistry) Unregister(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", name)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockRegistryMockRecorder) Unregister(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockRegistry)(nil).Unregister), name)
}
