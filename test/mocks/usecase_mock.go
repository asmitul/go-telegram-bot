// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/interfaces.go -destination=test/mocks/usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	user "telegram-bot/internal/domain/user"
	group "telegram-bot/internal/usecase/group"
	user0 "telegram-bot/internal/usecase/user"

	gomock "go.uber.org/mock/gomock"
)

// MockUserManagement is a mock of UserManagement interface.
type MockUserManagement struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagementMockRecorder
	isgomock struct{}
}

// MockUserManagementMockRecorder is the mock recorder for MockUserManagement.
type MockUserManagementMockRecorder struct {
	mock *MockUserManagement
}

// NewMockUserManagement creates a new mock instance.
func NewMockUserManagement(ctrl *gomock.Controller) *MockUserManagement {
	mock := &MockUserManagement{ctrl: ctrl}
	mock.recorder = &MockUserManagementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManagement) EXPECT() *MockUserManagementMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockUserManagement) CheckPermission(ctx context.Context, userID, groupID int64, required user.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", ctx, userID, groupID, required)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockUserManagementMockRecorder) CheckPermission(ctx, userID, groupID, required any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockUserManagement)(nil).CheckPermission), ctx, userID, groupID, required)
}

// DemoteAdmin mocks base method.
func (m *MockUserManagement) DemoteAdmin(ctx context.Context, input user0.DemoteAdminInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemoteAdmin", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DemoteAdmin indicates an expected call of DemoteAdmin.
func (mr *MockUserManagementMockRecorder) DemoteAdmin(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemoteAdmin", reflect.TypeOf((*MockUserManagement)(nil).DemoteAdmin), ctx, input)
}

// GetUserPermission mocks base method.
func (m *MockUserManagement) GetUserPermission(ctx context.Context, userID, groupID int64) (user.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermission", ctx, userID, groupID)
	ret0, _ := ret[0].(user.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermission indicates an expected call of GetUserPermission.
func (mr *MockUserManagementMockRecorder) GetUserPermission(ctx, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermission", reflect.TypeOf((*MockUserManagement)(nil).GetUserPermission), ctx, userID, groupID)
}

// IsAdmin mocks base method.
func (m *MockUserManagement) IsAdmin(ctx context.Context, userID, groupID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, userID, groupID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockUserManagementMockRecorder) IsAdmin(ctx, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockUserManagement)(nil).IsAdmin), ctx, userID, groupID)
}

// IsSuperAdmin mocks base method.
func (m *MockUserManagement) IsSuperAdmin(ctx context.Context, userID, groupID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuperAdmin", ctx, userID, groupID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSuperAdmin indicates an expected call of IsSuperAdmin.
func (mr *MockUserManagementMockRecorder) IsSuperAdmin(ctx, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuperAdmin", reflect.TypeOf((*MockUserManagement)(nil).IsSuperAdmin), ctx, userID, groupID)
}

// ListAdmins mocks base method.
func (m *MockUserManagement) ListAdmins(ctx context.Context, operatorID, groupID int64) (*user0.ListAdminsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdmins", ctx, operatorID, groupID)
	ret0, _ := ret[0].(*user0.ListAdminsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdmins indicates an expected call of ListAdmins.
func (mr *MockUserManagementMockRecorder) ListAdmins(ctx, operatorID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdmins", reflect.TypeOf((*MockUserManagement)(nil).ListAdmins), ctx, operatorID, groupID)
}

// PromoteAdmin mocks base method.
func (m *MockUserManagement) PromoteAdmin(ctx context.Context, input user0.PromoteAdminInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteAdmin", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// PromoteAdmin indicates an expected call of PromoteAdmin.
func (mr *MockUserManagementMockRecorder) PromoteAdmin(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteAdmin", reflect.TypeOf((*MockUserManagement)(nil).PromoteAdmin), ctx, input)
}

// RemoveAdmin mocks base method.
func (m *MockUserManagement) RemoveAdmin(ctx context.Context, operatorID, targetID, groupID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAdmin", ctx, operatorID, targetID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAdmin indicates an expected call of RemoveAdmin.
func (mr *MockUserManagementMockRecorder) RemoveAdmin(ctx, operatorID, targetID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAdmin", reflect.TypeOf((*MockUserManagement)(nil).RemoveAdmin), ctx, operatorID, targetID, groupID)
}

// SetPermission mocks base method.
func (m *MockUserManagement) SetPermission(ctx context.Context, operatorID, targetID, groupID int64, permission user.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPermission", ctx, operatorID, targetID, groupID, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPermission indicates an expected call of SetPermission.
func (mr *MockUserManagementMockRecorder) SetPermission(ctx, operatorID, targetID, groupID, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPermission", reflect.TypeOf((*MockUserManagement)(nil).SetPermission), ctx, operatorID, targetID, groupID, permission)
}

// MockGroupCommandConfig is a mock of GroupCommandConfig interface.
type MockGroupCommandConfig struct {
	ctrl     *gomock.Controller
	recorder *MockGroupCommandConfigMockRecorder
	isgomock struct{}
}

// MockGroupCommandConfigMockRecorder is the mock recorder for MockGroupCommandConfig.
type MockGroupCommandConfigMockRecorder struct {
	mock *MockGroupCommandConfig
}

// NewMockGroupCommandConfig creates a new mock instance.
func NewMockGroupCommandConfig(ctrl *gomock.Controller) *MockGroupCommandConfig {
	mock := &MockGroupCommandConfig{ctrl: ctrl}
	mock.recorder = &MockGroupCommandConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupCommandConfig) EXPECT() *MockGroupCommandConfigMockRecorder {
	return m.recorder
}

// BatchConfigure mocks base method.
func (m *MockGroupCommandConfig) BatchConfigure(ctx context.Context, input group.BatchConfigureInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchConfigure", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchConfigure indicates an expected call of BatchConfigure.
func (mr *MockGroupCommandConfigMockRecorder) BatchConfigure(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchConfigure", reflect.TypeOf((*MockGroupCommandConfig)(nil).BatchConfigure), ctx, input)
}

// DisableCommand mocks base method.
func (m *MockGroupCommandConfig) DisableCommand(ctx context.Context, input group.DisableCommandInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableCommand", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableCommand indicates an expected call of DisableCommand.
func (mr *MockGroupCommandConfigMockRecorder) DisableCommand(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableCommand", reflect.TypeOf((*MockGroupCommandConfig)(nil).DisableCommand), ctx, input)
}

// EnableCommand mocks base method.
func (m *MockGroupCommandConfig) EnableCommand(ctx context.Context, input group.EnableCommandInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCommand", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableCommand indicates an expected call of EnableCommand.
func (mr *MockGroupCommandConfigMockRecorder) EnableCommand(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCommand", reflect.TypeOf((*MockGroupCommandConfig)(nil).EnableCommand), ctx, input)
}

// GetCommandStatus mocks base method.
func (m *MockGroupCommandConfig) GetCommandStatus(ctx context.Context, input group.GetCommandStatusInput) (*group.CommandStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommandStatus", ctx, input)
	ret0, _ := ret[0].(*group.CommandStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommandStatus indicates an expected call of GetCommandStatus.
func (mr *MockGroupCommandConfigMockRecorder) GetCommandStatus(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandStatus", reflect.TypeOf((*MockGroupCommandConfig)(nil).GetCommandStatus), ctx, input)
}

// ListCommands mocks base method.
func (m *MockGroupCommandConfig) ListCommands(ctx context.Context, operatorID, groupID int64) (*group.ListCommandsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommands", ctx, operatorID, groupID)
	ret0, _ := ret[0].(*group.ListCommandsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommands indicates an expected call of ListCommands.
func (mr *MockGroupCommandConfigMockRecorder) ListCommands(ctx, operatorID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommands", reflect.TypeOf((*MockGroupCommandConfig)(nil).ListCommands), ctx, operatorID, groupID)
}

// MockGroupConfig is a mock of GroupConfig interface.
type MockGroupConfig struct {
	ctrl     *gomock.Controller
	recorder *MockGroupConfigMockRecorder
	isgomock struct{}
}

// MockGroupConfigMockRecorder is the mock recorder for MockGroupConfig.
type MockGroupConfigMockRecorder struct {
	mock *MockGroupConfig
}

// NewMockGroupConfig creates a new mock instance.
func NewMockGroupConfig(ctrl *gomock.Controller) *MockGroupConfig {
	mock := &MockGroupConfig{ctrl: ctrl}
	mock.recorder = &MockGroupConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupConfig) EXPECT() *MockGroupConfigMockRecorder {
	return m.recorder
}

// GetAllGroupConfigs mocks base method.
func (m *MockGroupConfig) GetAllGroupConfigs(ctx context.Context, operatorID int64) (*group.GetAllGroupConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroupConfigs", ctx, operatorID)
	ret0, _ := ret[0].(*group.GetAllGroupConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroupConfigs indicates an expected call of GetAllGroupConfigs.
func (mr *MockGroupConfigMockRecorder) GetAllGroupConfigs(ctx, operatorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroupConfigs", reflect.TypeOf((*MockGroupConfig)(nil).GetAllGroupConfigs), ctx, operatorID)
}

// GetGroupConfig mocks base method.
func (m *MockGroupConfig) GetGroupConfig(ctx context.Context, operatorID, groupID int64) (*group.GroupConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupConfig", ctx, operatorID, groupID)
	ret0, _ := ret[0].(*group.GroupConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupConfig indicates an expected call of GetGroupConfig.
func (mr *MockGroupConfigMockRecorder) GetGroupConfig(ctx, operatorID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupConfig", reflect.TypeOf((*MockGroupConfig)(nil).GetGroupConfig), ctx, operatorID, groupID)
}

// GetGroupSetting mocks base method.
func (m *MockGroupConfig) GetGroupSetting(ctx context.Context, operatorID, groupID int64, key string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupSetting", ctx, operatorID, groupID, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupSetting indicates an expected call of GetGroupSetting.
func (mr *MockGroupConfigMockRecorder) GetGroupSetting(ctx, operatorID, groupID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSetting", reflect.TypeOf((*MockGroupConfig)(nil).GetGroupSetting), ctx, operatorID, groupID, key)
}

// SetGroupSetting mocks base method.
func (m *MockGroupConfig) SetGroupSetting(ctx context.Context, operatorID, groupID int64, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGroupSetting", ctx, operatorID, groupID, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGroupSetting indicates an expected call of SetGroupSetting.
func (mr *MockGroupConfigMockRecorder) SetGroupSetting(ctx, operatorID, groupID, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupSetting", reflect.TypeOf((*MockGroupConfig)(nil).SetGroupSetting), ctx, operatorID, groupID, key, value)
}

// UpdateGroupSettings mocks base method.
func (m *MockGroupConfig) UpdateGroupSettings(ctx context.Context, input group.UpdateGroupSettingsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupSettings", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupSettings indicates an expected call of UpdateGroupSettings.
func (mr *MockGroupConfigMockRecorder) UpdateGroupSettings(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupSettings", reflect.TypeOf((*MockGroupConfig)(nil).UpdateGroupSettings), ctx, input)
}
