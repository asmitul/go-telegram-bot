// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/user/warning.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/user/warning.go -destination=test/mocks/warning_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	user "telegram-bot/internal/domain/user"

	gomock "go.uber.org/mock/gomock"
)

// MockWarningRepository is a mock of WarningRepository interface.
type MockWarningRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWarningRepositoryMockRecorder
	isgomock struct{}
}

// MockWarningRepositoryMockRecorder is the mock recorder for MockWarningRepository.
type MockWarningRepositoryMockRecorder struct {
	mock *MockWarningRepository
}

// NewMockWarningRepository creates a new mock instance.
func NewMockWarningRepository(ctrl *gomock.Controller) *MockWarningRepository {
	mock := &MockWarningRepository{ctrl: ctrl}
	mock.recorder = &MockWarningRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarningRepository) EXPECT() *MockWarningRepositoryMockRecorder {
	return m.recorder
}

// ClearWarnings mocks base method.
func (m *MockWarningRepository) ClearWarnings(userID, groupID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearWarnings", userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearWarnings indicates an expected call of ClearWarnings.
func (mr *MockWarningRepositoryMockRecorder) ClearWarnings(userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearWarnings", reflect.TypeOf((*MockWarningRepository)(nil).ClearWarnings), userID, groupID)
}

// CountActiveWarnings mocks base method.
func (m *MockWarningRepository) CountActiveWarnings(userID, groupID int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActiveWarnings", userID, groupID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActiveWarnings indicates an expected call of CountActiveWarnings.
func (mr *MockWarningRepositoryMockRecorder) CountActiveWarnings(userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActiveWarnings", reflect.TypeOf((*MockWarningRepository)(nil).CountActiveWarnings), userID, groupID)
}

// Delete mocks base method.
func (m *MockWarningRepository) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWarningRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWarningRepository)(nil).Delete), id)
}

// FindByUserAndGroup mocks base method.
func (m *MockWarningRepository) FindByUserAndGroup(userID, groupID int64) ([]*user.Warning, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserAndGroup", userID, groupID)
	ret0, _ := ret[0].([]*user.Warning)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserAndGroup indicates an expected call of FindByUserAndGroup.
func (mr *MockWarningRepositoryMockRecorder) FindByUserAndGroup(userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserAndGroup", reflect.TypeOf((*MockWarningRepository)(nil).FindByUserAndGroup), userID, groupID)
}

// Save mocks base method.
func (m *MockWarningRepository) Save(warning *user.Warning) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", warning)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockWarningRepositoryMockRecorder) Save(warning any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockWarningRepository)(nil).Save), warning)
}
